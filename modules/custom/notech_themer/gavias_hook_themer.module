<?php
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\FieldDefinition;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Form\FormStateInterface;
use \Drupal\Core\Menu\MenuLinkInterface;
use Drupal\Core\Menu\MenuLinkDefault;
use Drupal\Core\Menu\MenuLinkContent;
use Drupal\block\Entity\Block;
use \Drupal\Core\File\FileSystemInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gavias_hook_themer_theme() {
  	return [
	 	'views_view_gvacarouselfilter' => [
			'variables' => [],
	 	]
  	];
}

function gavias_hook_themer_makeid($length = 5){
  	$characters = '0123456789abcdefghijklmnopqrstuvwxyz';
  	$randomString = '';
  	for ($i = 0; $i < $length; $i++) {
	 	$randomString .= $characters[rand(0, strlen($characters) - 1)];
  	}
  	return $randomString;
}

/**
 * Implements hook_preprocess_html().
 */
function gavias_hook_themer_preprocess_html(&$variables) {
  	$path = \Drupal::service('path.current')->getPath();
  	$path_args = explode('/', $path);
  	if (isset($path_args[1]) && isset($path_args[2]) && ($path_args[1] == 'node') && (is_numeric($path_args[2]))) {
	 	$node = \Drupal\node\Entity\Node::load($path_args[2]);
	 	if($node && $node->hasField('gva_node_class')){
			$class_body = $node->get('gva_node_class')->getValue();
			if(isset($class_body) && !empty($class_body[0])) {
			 	$variables['attributes']['class'][] = $class_body[0]['value'];
			}
	 	}
	 	if($node && $node->hasField('gva_box_layout')){
			$box_layout = $node->get('gva_box_layout')->getValue();
			if(isset($box_layout) && !empty($box_layout[0])) {
			 	$variables['attributes']['class'][] = $box_layout[0]['value'];
			}
	 	}
  	}
}

function gavias_hook_themer_preprocess_page(&$variables) {
  	$path = \Drupal::service('path.current')->getPath();
  	$path_args = explode('/', $path);
  	if ($node = \Drupal::request()->attributes->get('node')) {
		if(is_object($node)){
			$variables['gva_header'] = '';
			if($node){
			  	if($node->hasField('gva_header')){
				 	$gva_header = $node->get('gva_header')->value;
				 	if($gva_header) {
						$variables['gva_header'] = $gva_header;
				 	}
			  	}
			  	if($node->hasField('gva_breadcrumb')){
				 	$gva_breadcrumb = $node->get('gva_breadcrumb')->value;
				 	if($gva_breadcrumb && $gva_breadcrumb == 'disable'){
						if(isset($variables['page']['breadcrumbs'])) unset($variables['page']['breadcrumbs']);
				 	}
			  	}
			}  
	 	}
  	}
}


/**
 * Additional submit handler for menu_link_content_form.
 */
function gavias_hook_themer_form_menu_link_content_form_submit(array &$form, FormStateInterface $form_state) {
  	$values = $form_state->getValues();
  	$attributes = array();

  	foreach ($values['attributes'] as $attribute => $value) {
	 	$value = trim($value);
	 	if (!empty($value)) {
			$attributes[$attribute] = $value;
	 	}
  	}

  	$menuLinkEntity = _gavias_hook_themer_get_menu_link_entity_from_form_state($form_state);
  	$options = $menuLinkEntity->link->first()->options;
  	$changed = FALSE;
  	if (empty($attributes)) {
	 	if (!empty($options['attributes'])) {
			unset($options['attributes']);
			$changed = TRUE;
	 	}
  	}
  	else {
	 	$options['attributes'] = $attributes;
	 	$changed = TRUE;
  	}

  	if ($changed) {
	 	$menuLinkEntity->link->first()->options = $options;
	 	$menuLinkEntity->save();
  	}
}

function _gavias_hook_themer_get_menu_link_entity_from_form_state(FormStateInterface $form_state) {
  	$buildInfo = $form_state->getBuildInfo();
  	$menuLinkContentForm = $buildInfo['callback_object'];
  	return $menuLinkContentForm->getEntity();
}

/**
 * Implements hook_preprocess_HOOK().
 */
function gavias_hook_themer_preprocess_block(&$variables) {
  	// Blocks coming from page manager widget does not have id.
  	if (!empty($variables['elements']['#id'])) {
	 	$block = Block::load($variables['elements']['#id']);
	 	if ($classes = $block->getThirdPartySetting('gavias_hook_themer', 'classes')) {
			$variables['attributes']['class'][] = $classes;
	 	}
  	}
}


/**
* Implements hook_entity_view_alter().
*/
function gavias_hook_themer_entity_view_alter(array &$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
  	// Cheking view_mode for node.
  	if ($build['#view_mode'] === 'full' && $entity Instanceof \Drupal\node\NodeInterface) {
	 	// Cheking html_head_link on attached tags in head.
	 	if (!isset($build['#attached']['html_head_link'])) return;
	 	// Array to unset.
	 	$gavias_hook_themer = [
			'delete-form',
			'edit-form',
			'version-history',
			'revision'
	 	];
	 	// Unset loop.
	 	foreach ($build['#attached']['html_head_link'] as $key => $value) {
			if (isset($value[0]['rel']) && in_array($value[0]['rel'], $gavias_hook_themer)) unset($build['#attached']['html_head_link'][$key]);
	 	}
  	}
}

/**
 * Implements hook_page_attachments_alter().
 */
function gavias_hook_themer_page_attachments_alter(array &$attachments) {
  	// Array to unset.
  	$gavias_hook_themer = [
	 	'delete-form',
	 	'edit-form',
	 	'version-history',
	 	'revision'
  	];
  	// Unset loop.
  	if(isset($attachments['#attached']['html_head_link']) && is_array($attachments['#attached']['html_head_link'])){
	 	foreach ($attachments['#attached']['html_head_link'] as $key => $value) {
			if (isset($value[0]['rel']) && in_array($value[0]['rel'], $gavias_hook_themer)) unset($attachments['#attached']['html_head_link'][$key]);
	 	}
  	}
}


function gavias_hook_themer_form_node_form_alter(&$form, \Drupal\Core\Form\FormStateInterface &$form_state, $form_id) {
   unset($form['gavias_blockbuilder_layout']);
   unset($form['gva_shortcode']);

   $form['gva_node_settings'] = array(
      '#type'   => 'details',
      '#title'  => t('Node Settings'),
      '#group'  => 'advanced',
      '#open'   => TRUE,
      '#access' => TRUE,
      '#attributes' => array('class' => array('node-class-form')),
   );

   $path = \Drupal::service('path.current')->getPath();
   $path_args = explode('/', $path);
   $node_id = 0;
   if (isset($path_args[1]) && isset($path_args[2]) && ($path_args[1] == 'node') && (is_numeric($path_args[2]))) {
      $node = \Drupal\node\Entity\Node::load($path_args[2]);
      if($node->id()){
         $node_id = $node->id();
      }
   }

   $form['gva_node_class']['#group']           = 'gva_node_settings';
   $form['gva_node_layout']['#group']          = 'gva_node_settings';
   $form['gva_header']['#group']               = 'gva_node_settings';
   $form['gva_box_layout']['#group']           = 'gva_node_settings';
   $form['gva_breadcrumb']['#group']           = 'gva_node_settings';
}

/**
 * Implements hook_entity_base_field_info().
 */
function gavias_hook_themer_entity_base_field_info(EntityTypeInterface $entity_type) {
   if ($entity_type->id() === 'node') {

      $fields['gva_node_layout'] = BaseFieldDefinition::create('list_string')
         ->setSetting('allowed_values', [
            'fw' => 'Fullwith no sidebar (use for block builder)',
            'fw_sidebar' => 'Fullwidth width sidebar',
            'container_sidebar' => 'Container width sidebar',
            'container_no_sidebar' => 'Container no sidebar'
         ])
         ->setLabel(t('Layout settings'))
         ->setDisplayOptions('form', array(
            'type'    => 'options_select',
            'weight'  => 1,
         ))
         ->setDisplayConfigurable('form', TRUE);

      $fields['gva_breadcrumb'] = BaseFieldDefinition::create('list_string')
         ->setSetting('allowed_values', [
            'enable'    => 'Enable',
            'disable'   => 'Disable'
         ])
         ->setLabel(t('Breadcrumb settings'))
         ->setDisplayOptions('form', array(
            'type'    => 'options_select',
            'weight'  => 2,
         ))
         ->setDisplayConfigurable('form', TRUE);  

      $fields['gva_header'] = BaseFieldDefinition::create('list_string')
         ->setSetting('allowed_values', [
            'header'    => t('Header I'),
            'header-2'  => t('Header II'),  
            'header-3'  => t('Header III')
         ])
         ->setLabel(t('Header'))
         ->setDisplayOptions('form', array(
         'type'    => 'options_select',
         'weight'  => 3,
         ))
         ->setDisplayConfigurable('form', TRUE);

      $fields['gva_node_class'] = BaseFieldDefinition::create('string')
         ->setLabel(t('CSS class(es)'))
         ->setDisplayOptions('form', array(
            'type'    => 'string_textfield',
            'weight'  => 4,
         ))
         ->setDisplayConfigurable('form', TRUE);

      $fields['gva_box_layout'] = BaseFieldDefinition::create('list_string')
         ->setSetting('allowed_values', [
            'boxed'         => t('Boxed'),
            'Wide'          => t('Wide')
         ])
         ->setLabel(t('Layout Box'))
         ->setDisplayOptions('form', array(
            'type'    => 'options_select',
            'weight'  => 5,
         ))
         ->setDisplayConfigurable('form', TRUE);
      return $fields;
   }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function gavias_hook_themer_form_block_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
   /** @var \Drupal\block\BlockInterface $block */
   $block = $form_state->getFormObject()->getEntity();
   $_id = $block->ID();
   //print "<pre>";print_r($block->getPluginId());die();
  
   // This will automatically be saved in the third party settings.
   $form['breadcrumb_background_image']['#tree'] = TRUE;
   $form['third_party_settings']['#tree'] = TRUE;
   //Add fields for breadcrumb
   // print \Drupal::config('gavias_hook_themer.settings')->get('breadcrumb_background_image_path_' . $_id);
  
  if($block->getPluginId() == 'system_breadcrumb_block'){
    
      $form['breadcrumb_background_image']['file_upload'] = array(
         '#type' => 'file',
         '#title' => t('Breadcrumb | Background Image'),
         '#description' => t('Upload a file, allowed extensions: jpg, jpeg, png, gif')
      );

      $form['third_party_settings']['gavias_hook_themer']['breadcrumb_background_image_path'] = array(
         '#type' => 'textfield',
         '#title' => t('Breadcrumb | Background Image Path'),
         '#default_value' => \Drupal::config('gavias_hook_themer.settings')->get('breadcrumb_background_image_path_' . $_id)
      );

      $form['third_party_settings']['gavias_hook_themer']['breadcrumb_background_color'] = array(
         '#type' => 'textfield',
         '#title' => t('Breadcrumb | Background Color'),
         '#description' => t('Setting background color for breadcrumb. eg: #f5f5f5;'),
         '#default_value' => $block->getThirdPartySetting('gavias_hook_themer', 'breadcrumb_background_color'),
      );

      $form['third_party_settings']['gavias_hook_themer']['breadcrumb_background_position'] = array(
         '#type' => 'select',
         '#title' => t('Breadcrumb | Background Position'),
         '#description' => t('Setting background position for breadcrumb.'),
         '#options' => array(
           'center top'        => t('center top'),
           'center right'      => t('center right'),
           'center bottom'     => t('center bottom'),
           'center center'     => t('center center'),
           'left top'          => t('left top'),
           'left center'       => t('left center'),
           'left bottom'       => t('left bottom'),
           'right top'         => t('right top'),
           'right center'      => t('right center'),
           'right bottom'      => t('right bottom')
         ),
         '#default_value' => $block->getThirdPartySetting('gavias_hook_themer', 'breadcrumb_background_position'),
      );

      $form['third_party_settings']['gavias_hook_themer']['breadcrumb_background_repeat'] = array(
         '#type' => 'select',
         '#title' => t('Breadcrumb | Background Repeat'),
         '#description' => t('Setting background pepeat for breadcrumb.'),
         '#options' => array(
           'no-repeat'         => t('no-repeat'),
           'repeat'            => t('repeat'),
           'repeat-x'          => t('repeat-x'),
           'repeat-y'          => t('repeat-y')
         ),
         '#default_value' => $block->getThirdPartySetting('gavias_hook_themer', 'breadcrumb_background_repeat'),
      );

      $form['third_party_settings']['gavias_hook_themer']['breadcrumb_color_style'] = array(
         '#type' => 'select',
         '#title' => t('Breadcrumb | Color Style'),
         '#description' => t('Setting color style for breadcrumb.'),
         '#options' => array(
            'text-dark'          => t('Text dark'),
            'text-light'         => t('Text light')
         ), 
         '#default_value' => $block->getThirdPartySetting('gavias_hook_themer', 'breadcrumb_color_style'),
      );

   }

   $form['third_party_settings']['gavias_hook_themer']['classes'] = array(
      '#type' => 'textfield',
      '#title' => t('CSS class(es)'),
      '#description' => t('Customize the styling of this block by adding CSS classes. Separate multiple classes by spaces.'),
      '#default_value' => $block->getThirdPartySetting('gavias_hook_themer', 'classes'),
   );

   $form['actions']['submit']['#submit'][] = 'gavias_hook_themer_form_block_form_submit';
   $form['#validate'][] = 'gavias_hook_themer_form_block_form_validate';
}

 function gavias_hook_themer_form_block_form_validate(array &$form, FormStateInterface $form_state) {
   
   $block = $form_state->getFormObject()->getEntity();
   $values = $form_state->getValues();
   
   if($block->getPluginId() == 'system_breadcrumb_block'){
      if (\Drupal::moduleHandler()->moduleExists('file')) {
         // Handle file uploads.
         $validators = array('file_validate_is_image' => array());

         // Check for a new uploaded logo.
         $file = file_save_upload('breadcrumb_background_image', $validators, FALSE, 0);
         if (isset($file)) {
            // File upload was attempted.
            if ($file) {
               // Put the temporary file in form_values so we can save it on submit.
               $form_state->setValue('breadcrumb_background_image_tmp', $file);
            }
            else {
               // File upload failed.
               $form_state->setValue('breadcrumb_background_image_tmp', '');
               $form_state->setErrorByName('breadcrumb_background_image_error', $this->t('The logo could not be uploaded.'));
            }
         }else{
               $form_state->setValue('breadcrumb_background_image_tmp', '');
         }
         $validators = array('file_validate_extensions' => array('ico png gif jpg jpeg apng svg'));
      }
   }
}

function gavias_hook_themer_form_block_form_submit(array &$form, FormStateInterface &$form_state) {
   $block = $form_state->getFormObject()->getEntity();
   $_id = $block->ID();

   if($block->getPluginId() == 'system_breadcrumb_block'){
      $values = $form_state->getValues();
      if( isset($values['breadcrumb_background_image_tmp']) && !empty($values['breadcrumb_background_image_tmp']) ) {
         //$filename = \Drupal::service('file_system')->copy($values['breadcrumb_background_image_tmp']->getFileUri(), 'public://breadcrumb-image', FileSystemInterface::EXISTS_REPLACE);
         $filename = \Drupal::service('file_system')->copy($values['breadcrumb_background_image_tmp']->getFileUri(), 'public://breadcrumb-' . $values['breadcrumb_background_image_tmp']->getFileName(), FileSystemInterface::EXISTS_RENAME);
         if (!empty($filename)) {
            \Drupal::configFactory()->getEditable('gavias_hook_themer.settings')
            ->set('breadcrumb_background_image_path_' . $_id, gavias_hook_themer_validate_path($filename))
            ->save();
         }
      }else{
         $default_value = isset($values['third_party_settings']['gavias_hook_themer']['breadcrumb_background_image_path']) ? $values['third_party_settings']['gavias_hook_themer']['breadcrumb_background_image_path'] : '';
         \Drupal::configFactory()->getEditable('gavias_hook_themer.settings')
            ->set('breadcrumb_background_image_path_' . $_id, $default_value)
            ->save();
      }
   }
}    

function gavias_hook_themer_validate_path($path) {
   // Absolute local file paths are invalid.
   if (\Drupal::service('file_system')->realpath($path) == $path) {
      return FALSE;
   }
   // A path relative to the Drupal root or a fully qualified URI is valid.
   if (is_file($path)) {
      return $path;
   }
   // Prepend 'public://' for relative file paths within public filesystem.
   if (file_uri_scheme($path) === FALSE) {
      $path = 'public://' . $path;
   }
   if (is_file($path)) {
      return $path;
   }
   return FALSE;
}

/**
 * Implements hook_module_implements_alter().
 */
function gavias_hook_themer_module_implements_alter(&$implementations, $hook) {
  	if ($hook === 'page_attachments_alter') {
	 	$group = $implementations['gavias_hook_themer'];
	 	unset($implementations['gavias_hook_themer']);
	 	$implementations['gavias_hook_themer'] = $group;
  	}
}

function gavias_hook_themer_update_projects_alter(&$projects){
	unset($projects['gavias_hook_themer']);
	unset($projects['Gaviasthemer']);
}


function gavias_hook_themer_sliderlayer_styles_alter(&$variables){
  	$variables['data'] = array(
	 	''                   => 'None',
	 	'slide-style-1'      => 'Style 1: Headings',
	 	'slide-style-2'      => 'Style 2: Headings, Letter Spacing',
	 	'slide-style-3'      => 'Style 3: Headings, Letter Spacing, Border Bottom',
	 	'btn-slide'          => 'Style 4: Button theme',
	 	'btn-slide-white'    => 'Style 5: Button white'
  	);
}


